from numpy import *
from math import sqrt
import numpy as np
import scipy
import math
import sys

# Input: expects Nx3 matrix of points
# Returns R,t
# R = 3x3 rotation matrix
# t = 3x1 column vector

# Test Data

Bt = np.array([[0.9118863797562397, 0.3625370870460625, 0.35760719174962896],
               [0.6758265284563376, 0.3678044391469214, 0.3121312943232474],
               [0.5661396753666902, 0.31411417390884633, 0.3679994695124493],
               [0.7019285104421124, 0.2481173656019182, 0.37381450872341077],
               [0.7624926643526011, 0.444369068006518, 0.38059999946399287],
               [0.7979694918087238, 0.03198253038490799, 0.3370033888857257],
               [0.6380779103018048, 0.1429702483726177, 0.05256233257197579],
               [0.5252542202942532, -0.023664430734612954, 0.14663364477847896],
               [0.7398310824690556, 0.2953527738513836, 0.11572428170354328],
               [0.7083170200025483, -0.1787520820451185, 0.1553855111322602],
               [0.8334270959101555, -0.36104481545164724, 0.08588972720818445],
               [0.9205909445579914, 0.15001827968165254, 0.09324402574532233],
               [0.8920858023220376, 0.30624651545163717, 0.06910516955892987],
               [0.717673189305851, -0.10174220376570708, 0.11254147935696955],
               [0.6998274222124075, -0.26897571621992855, 0.16060581642474892],
               [0.6242914716978996, -0.4400150238542857, 0.23279399339876167],
               [0.6903717934635643, -0.1366959861360054, 0.22105599426669326],
               [0.7660872548684867, 0.1721110696552794, 0.22051923630629178],
               [0.6950123969592638, 0.40491443031714935, 0.28531671276004616],
               [0.812490055046739, 0.4543169714794971, 0.2908304092674058],
               [0.6191127553826977, 0.18165786981945795, 0.2587689970915902],
               [0.6265570987716915, -0.32625084792095, 0.2768051501292983],
               [0.764890879370757, -0.2635785702524343, -0.06599445769107531],
               [0.8426387890378657, -0.08441582074675405, -0.0958751968380734],
               [0.9524515062361044, 0.007898716612703442, 0.19951793238926363],
               [0.7731816214575862, -0.19320347211402458, 0.2022223988419841],
               [0.684228776005316, -0.37627987007103836, 0.15063134357412256],
               [0.5904273309496791, -0.598170677899999, 0.17285158941239437],
               [0.7390387578347257, -0.6841653718040014, 0.14712960337172942],
               [0.9050342475973211, -0.06688162461636696, 0.13233233598557193],
               [0.9002763801886281, 0.3262825386776889, 0.1855205946649266],
               [0.8215175242046306, 0.2977092591730465, 0.44578748418562203],
               [0.6566217460672831, 0.15350227332023422, 0.26540809651797126],
               [0.6692248667411239, 0.29340722913742917, 0.14688215080757927],
               [0.6172178574921214, 0.5245481620524236, 0.11420617421041601],
               [0.7214142503619922, 0.5552482275578207, 0.48555585953430097],
               [0.6456249797424531, 0.459937131153971, -0.04733398066856489],
               [0.7339291154311914, 0.11526135122237677, -0.12244911814849632],
               [0.8725822229343536, -0.32364384227080334, -0.06216009207120356],
               [0.6785518383753409, -0.3622091488545166, 0.041551809732368425],
               [0.6906502738702289, -0.4808410154348677, 0.10477004263786886],
               [0.8301806186022641, 0.127019421975911, 0.06496731527471544],
               [0.8247347302638206, 0.44495942237403396, 0.2131907069451606],
               [0.9209404676118598, 0.2710533672654606, 0.343377732808391],
               [0.9179729079882586, 0.2803896727716852, 0.14489455184065872],
               [0.9469954448252264, -0.3271837961431696, 0.15375114805425885],
               [0.9131528255696738, 0.05716196410260816, 0.18442292806057722],
               [0.9565434632976534, 0.19894793903535002, 0.17551520295995257],
               [0.688920828413798, 0.18120130370608462, 0.2056563643604035],
               [0.5017401117680803, 0.00653571385256301, 0.2121919932021872],
               [0.45303683672890416, -0.2172530941347478, 0.21553883228639364],
               [0.522887197942057, 0.1824446909391422, 0.18617549351804313],
               [0.6711356897623718, 0.44459166783303855, 0.22374212007799676],
               [0.7062995547701753, 0.5663784463141304, 0.2493410483123269],
               [0.9042821102023659, 0.11170501451625914, -0.029475492109611034],
               [0.9378011561466266, -0.03945543320262733, 0.261238918242134],
               [0.6606246159629722, -0.29953217108507446, 0.29548886379995787],
               [0.6514383266955968, 0.1062920761839252, 0.20662271306294303],
               [0.8082459388248537, 0.3801857716416417, 0.25508674749711086],
               [0.869547044528053, 0.2641056832015259, 0.3975034876758996],
               [0.6740146077579986, 0.5774925161579357, 0.40430351472809095],
               [0.6596290572121651, 0.6169587537565574, 0.4345332343396786],
               [0.6237553932347593, 0.4337576138940058, 0.3457250897656005],
               [0.6756777437670466, 0.11102581629407224, 0.32496463199703685],
               [0.7017541726169199, 0.21173668050131964, -0.030338524794921218],
               [0.779991741983933, -0.11242053647452246, -0.030148308287696463],
               [0.6929942421816093, -0.2668991966712447, 0.11660558505555157],
               [0.9854547028925832, -0.06257785881072714, 0.14572887311669463],
               [0.6730546650400967, 0.330807209094911, 0.21109468878180143],
               [0.7317699687767284, -0.5714313709500779, 0.042153641987254506],
               [0.8426900271237816, -0.20266406346164417, -0.07391917146525309],
               [0.7589693997170245, 0.07782736527504112, -0.002090345212505257],
               [0.7617701064327497, 0.3891849141768847, 0.08596196827864637],
               [0.6684650433967539, 0.5009209416980261, 0.3105899091111853],
               [0.8026227812303419, 0.019357767260767607, 0.17332314272678015],
               [0.7802903199139443, -0.28271232755242376, 0.17827264312430602],
               [0.6599888049506075, -0.5218707296879495, 0.19864145566838554]])

Kt = np.array([[158.0, 114.0, 0.6378487348556519],
               [286.0, 168.0, 0.5121951103210449],
               [364.0, 125.0, 0.2354455441236496],
               [292.0, 96.0, 0.45861297845840454],
               [196.0, 131.0, 0.22831682860851288],
               [297.0, 60.0, 0.3194218575954437],
               [351.0, 234.0, 0.22632363438606262],
               [424.0, 168.0, 0.1996644288301468],
               [275.0, 240.0, 0.330307275056839],
               [373.0, 119.0, 0.21383993327617645],
               [354.0, 108.0, 0.4039895534515381],
               [233.0, 188.0, 0.5137665271759033],
               [208.0, 246.0, 0.1983594298362732],
               [365.0, 152.0, 0.21751101315021515],
               [390.0, 103.0, 0.21085010468959808],
               [430.0, 56.0, 0.3491797149181366],
               [375.0, 102.0, 0.382363885641098],
               [289.0, 157.0, 0.47999998927116394],
               [265.0, 195.0, 0.36904221773147583],
               [181.0, 193.0, 0.18702289462089539],
               [353.0, 145.0, 0.22283406555652618],
               [424.0, 48.0, 0.34019872546195984],
               [360.0, 183.0, 0.22315435111522675],
               [308.0, 211.0, 0.24247430264949799],
               [248.0, 115.0, 0.505406379699707],
               [354.0, 94.0, 0.4076107442378998],
               [408.0, 96.0, 0.21912194788455963],
               [459.0, 63.0, 0.3346383273601532],
               [417.0, 57.0, 0.3494860529899597],
               [283.0, 135.0, 0.49782177805900574],
               [194.0, 202.0, 0.19004876911640167],
               [230.0, 60.0, 0.5299128890037537],
               [342.0, 139.0, 0.34475716948509216],
               [307.0, 227.0, 0.28945645689964294],
               [285.0, 338.0, 0.17872151732444763],
               [184.0, 106.0, 0.2619314193725586],
               [288.0, 370.0, 0.1785980612039566],
               [319.0, 276.0, 0.23696769773960114],
               [329.0, 161.0, 0.23713645339012146],
               [393.0, 135.0, 0.21010439097881317],
               [405.0, 90.0, 0.203560933470726],
               [266.0, 200.0, 0.34532374143600464],
               [186.0, 225.0, 0.15914097428321838],
               [189.0, 111.0, 0.5885533094406128],
               [192.0, 195.0, 0.18467827141284943],
               [312.0, 86.0, 0.4300660789012909],
               [259.0, 140.0, 0.49384787678718567],
               [205.0, 168.0, 0.5348620414733887],
               [318.0, 175.0, 0.2576237618923187],
               [433.0, 148.0, 0.1983594298362732],
               [479.0, 108.0, 0.0],
               [404.0, 201.0, 0.20995834469795227],
               [271.0, 245.0, 0.29290664196014404],
               [208.0, 273.0, 0.13224932551383972],
               [255.0, 233.0, 0.27348992228507996],
               [264.0, 84.0, 0.5015378594398499],
               [411.0, 46.0, 0.3644452691078186],
               [358.0, 159.0, 0.2676399052143097],
               [217.0, 192.0, 0.29502439498901367],
               [216.0, 86.0, 0.5270099639892578],
               [226.0, 197.0, 0.0],
               [212.0, 190.0, 0.11920233070850372],
               [303.0, 178.0, 0.33867546916007996],
               [340.0, 95.0, 0.41442951560020447],
               [311.0, 273.0, 0.2577560842037201],
               [342.0, 194.0, 0.23836985230445862],
               [396.0, 118.0, 0.20558002591133118],
               [253.0, 127.0, 0.5248780250549316],
               [295.0, 211.0, 0.2501835525035858],
               [406.0, 98.0, 0.20674869418144226],
               [326.0, 191.0, 0.24271108210086823],
               [317.0, 229.0, 0.2388032227754593],
               [246.0, 282.0, 0.17947746813297272],
               [252.0, 214.0, 0.2824687659740448],
               [305.0, 143.0, 0.4498296082019806],
               [364.0, 91.0, 0.38803228735923767],
               [429.0, 62.0, 0.3419603407382965]])

B = np.asmatrix(Bt)
K = np.asmatrix(Kt)


def ransac_loop():

    # Ransac parameters
    ransac_iterations = 500  # Number of iterations
    n_samples = len(K)
    best_rmse = None
    best_R = None
    best_t = None

    for iteration in range(ransac_iterations):

        # Pick 2 random points from each dataset
        n = int(n_samples * 0.8)  # Test on 80% of the data

        k_points = np.arange(K.shape[0])
        np.random.shuffle(k_points)

        sample = k_points[:n]

        sample_k = K[sample, :]
        sample_b = B[sample, :]

        # Find the rotation and translation for these sample points
        ret_R, ret_t = rigid_transform_3D(sample_k, sample_b)

        # Test the calculated transform and rotation
        rmse = test_point(ret_R, ret_t)

        if (best_rmse is None) or (rmse < best_rmse):
            best_rmse = rmse
            best_R = ret_R
            best_t = ret_t

    print "\n\nBest RMSE: "
    print best_rmse
    print "\nBest Rotation:"
    print best_R
    print "\nBest translation:"
    print best_t


def rigid_transform_3D(A, B):
    assert len(A) == len(B)

    N = A.shape[0]  # total points

    centroid_A = mean(A, axis=0)
    centroid_B = mean(B, axis=0)

    # centre the points
    AA = A - tile(centroid_A, (N, 1))
    BB = B - tile(centroid_B, (N, 1))

    # dot is matrix multiplication for array
    H = transpose(AA) * BB

    U, S, Vt = linalg.svd(H)

    R = Vt.T * U.T

    # special reflection case
    if linalg.det(R) < 0:
        print "Reflection detected"
        Vt[2, :] *= -1
        R = Vt.T * U.T

    t = -R * centroid_A.T + centroid_B.T

    return R, t


def test_point(ret_R, ret_t):
    K2 = (ret_R * K.T) + tile(ret_t, (1, n))
    K2 = K2.T

    # Find the error
    err = K2 - B

    err = multiply(err, err)
    err = sum(err)
    rmse = sqrt(err / n)

    return rmse


if __name__ == '__main__':
    # Test

    # number of points
    n = len(K)

    # Perform the ransac loop
    ransac_loop()
